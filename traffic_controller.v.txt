`timescale 1ns / 1ps


module traffic_control(input clk, input rst,output reg [2:0]light_A,output reg [2:0]light_B,output reg [2:0]light_C,output reg [2:0]light_D);
parameter s0=0 , s1=1, s2=2, s3=3, s4=4, s5=5;
reg [3:0]count;
reg [2:0]state;
parameter t1=8,t2=3,t3=4,t4=2;

always @(posedge clk)
begin
if(rst==1)
begin
state <= s0;
count <= 0;
end
else
begin
    case(state)
    s0 : if(count < t1)
            begin
            state <= s0;
            count = count + 1;
            end
          else
              begin
              state <= s1;
              count <= 0;
              end
     s1 : if(count < t4)
            begin
            state <= s1;
            count = count + 1;
            end
          else
              begin
              state <= s2;
              count <= 0;
              end 
      s3 : if(count < t3)           
              begin
                state <= s3;
                count = count + 1;
              end
              else
               begin
                 state <= s4;
                 count <= 0;
                end 
        s4 : if(count < t4)
                begin
                state <= s4;
                count = count + 1;
                end
              else
                  begin
                  state <= s5;
                  count <= 0;
                  end 
         s5 : if(count < t2)
                begin
                state <= s5;
                count = count + 1;
                end
              else
                  begin
                  state <= s0;
                  count <= 0;
                  end  
          default: state <= s0;   
        endcase 
        end
end

always@(state)
begin
case(state)
    s0: begin
    // lights order RYG
    light_A = 3'b001;
    light_B = 3'b100;
    light_C = 3'b001;
    light_D = 3'b100;
    end
    s1: begin
    light_A = 3'b001;
    light_B = 3'b100;
    light_C = 3'b010;
    light_D = 3'b100;
    end
    s2: begin
    light_A = 3'b001;
    light_B = 3'b001;
    light_C = 3'b100;
    light_D = 3'b100;
    end
    s3: begin
    light_A = 3'b010;
    light_B = 3'b010;
    light_C = 3'b100;
    light_D = 3'b100;
    end
    s4: begin
    light_A = 3'b100;
    light_B = 3'b100;
    light_C = 3'b100;
    light_D = 3'b001;
    end
    s5: begin
    light_A = 3'b100;
    light_B = 3'b100;
    light_C = 3'b100;
    light_D = 3'b010;
    end
    default: begin
    light_A = 3'b000;
    light_B = 3'b000;
    light_C = 3'b000;
    light_D = 3'b000;
    end
endcase
end

endmodule